//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DeclarativeDataDisplay {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NorthwindDataSet")]
    public partial class NorthwindDataSet : System.Data.DataSet {
        
        private CustomersDataTable tableCustomers;
        
        public NorthwindDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected NorthwindDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Customers"] != null)) {
                    base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomersDataTable Customers {
            get {
                return this.tableCustomers;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            NorthwindDataSet cln = ((NorthwindDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Customers"] != null)) {
                base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableCustomers = ((CustomersDataTable)(base.Tables["Customers"]));
            if ((initTable == true)) {
                if ((this.tableCustomers != null)) {
                    this.tableCustomers.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "NorthwindDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NorthwindDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableCustomers = new CustomersDataTable();
            base.Tables.Add(this.tableCustomers);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "NorthwindDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "NorthwindDataSet");
        }
        
        private bool ShouldSerializeCustomers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NorthwindDataSet ds = new NorthwindDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void CustomersRowChangeEventHandler(object sender, CustomersRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnCompanyName;
            
            private System.Data.DataColumn columnContactName;
            
            private System.Data.DataColumn columnContactTitle;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnCountry;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnFax;
            
            private bool m_suspendValidation = false;
            
            public CustomersDataTable() {
                this.TableName = "Customers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CustomersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CustomersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal System.Data.DataColumn ContactTitleColumn {
                get {
                    return this.columnContactTitle;
                }
            }
            
            internal System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CustomersRow this[int index] {
                get {
                    return ((CustomersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event CustomerIDChangeEventHandler CustomerIDChanging;
            
            public event CustomerIDChangeEventHandler CustomerIDChanged;
            
            public event CompanyNameChangeEventHandler CompanyNameChanging;
            
            public event CompanyNameChangeEventHandler CompanyNameChanged;
            
            public event ContactNameChangeEventHandler ContactNameChanging;
            
            public event ContactNameChangeEventHandler ContactNameChanged;
            
            public event ContactTitleChangeEventHandler ContactTitleChanging;
            
            public event ContactTitleChangeEventHandler ContactTitleChanged;
            
            public event AddressChangeEventHandler AddressChanging;
            
            public event AddressChangeEventHandler AddressChanged;
            
            public event CityChangeEventHandler CityChanging;
            
            public event CityChangeEventHandler CityChanged;
            
            public event PostalCodeChangeEventHandler PostalCodeChanging;
            
            public event PostalCodeChangeEventHandler PostalCodeChanged;
            
            public event CountryChangeEventHandler CountryChanging;
            
            public event CountryChangeEventHandler CountryChanged;
            
            public event PhoneChangeEventHandler PhoneChanging;
            
            public event PhoneChangeEventHandler PhoneChanged;
            
            public event FaxChangeEventHandler FaxChanging;
            
            public event FaxChangeEventHandler FaxChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanging;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleted;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CustomerID")) {
                    if ((this.CustomerIDChanging != null)) {
                        this.CustomerIDChanging(this, new CustomerIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanging != null)) {
                            this.CompanyNameChanging(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanging != null)) {
                                this.ContactNameChanging(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanging != null)) {
                                    this.ContactTitleChanging(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanging != null)) {
                                        this.AddressChanging(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanging != null)) {
                                            this.CityChanging(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "PostalCode")) {
                                            if ((this.PostalCodeChanging != null)) {
                                                this.PostalCodeChanging(this, new PostalCodeChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Country")) {
                                                if ((this.CountryChanging != null)) {
                                                    this.CountryChanging(this, new CountryChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Phone")) {
                                                    if ((this.PhoneChanging != null)) {
                                                        this.PhoneChanging(this, new PhoneChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Fax")) {
                                                        if ((this.FaxChanging != null)) {
                                                            this.FaxChanging(this, new FaxChangeEventArg(e));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CustomerID")) {
                    if ((this.CustomerIDChanged != null)) {
                        this.CustomerIDChanged(this, new CustomerIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanged != null)) {
                            this.CompanyNameChanged(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanged != null)) {
                                this.ContactNameChanged(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanged != null)) {
                                    this.ContactTitleChanged(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanged != null)) {
                                        this.AddressChanged(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanged != null)) {
                                            this.CityChanged(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "PostalCode")) {
                                            if ((this.PostalCodeChanged != null)) {
                                                this.PostalCodeChanged(this, new PostalCodeChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Country")) {
                                                if ((this.CountryChanged != null)) {
                                                    this.CountryChanged(this, new CountryChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Phone")) {
                                                    if ((this.PhoneChanged != null)) {
                                                        this.PhoneChanged(this, new PhoneChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Fax")) {
                                                        if ((this.FaxChanged != null)) {
                                                            this.FaxChanged(this, new FaxChangeEventArg(e));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddCustomersRow(CustomersRow row) {
                this.Rows.Add(row);
            }
            
            public CustomersRow AddCustomersRow(string CustomerID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string PostalCode, string Country, string Phone, string Fax) {
                CustomersRow rowCustomersRow = ((CustomersRow)(this.NewRow()));
                rowCustomersRow.ItemArray = new object[] {
                        CustomerID,
                        CompanyName,
                        ContactName,
                        ContactTitle,
                        Address,
                        City,
                        PostalCode,
                        Country,
                        Phone,
                        Fax};
                this.Rows.Add(rowCustomersRow);
                return rowCustomersRow;
            }
            
            public CustomersRow FindByCustomerID(string CustomerID) {
                return ((CustomersRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CustomersDataTable cln = ((CustomersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CustomersDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnContactTitle = base.Columns["ContactTitle"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone = base.Columns["Phone"];
                this.columnFax = base.Columns["Fax"];
            }
            
            private void InitClass() {
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(string), null, System.Data.MappingType.Element);
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangedEventName", "CustomerIDChanged");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangingEventName", "CustomerIDChanging");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CustomerIDColumn");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_DelegateName", "CustomerIDChangeEventHandler");
                this.columnCustomerID.ExtendedProperties.Add("Generator_EventArgName", "CustomerIDChangeEventArg");
                this.columnCustomerID.ExtendedProperties.Add("User_ColumnName", "CustomerID");
                base.Columns.Add(this.columnCustomerID);
                this.columnCompanyName = new System.Data.DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangedEventName", "CompanyNameChanged");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangingEventName", "CompanyNameChanging");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CompanyNameColumn");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_DelegateName", "CompanyNameChangeEventHandler");
                this.columnCompanyName.ExtendedProperties.Add("Generator_EventArgName", "CompanyNameChangeEventArg");
                this.columnCompanyName.ExtendedProperties.Add("User_ColumnName", "CompanyName");
                base.Columns.Add(this.columnCompanyName);
                this.columnContactName = new System.Data.DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactName.ExtendedProperties.Add("Generator_ChangedEventName", "ContactNameChanged");
                this.columnContactName.ExtendedProperties.Add("Generator_ChangingEventName", "ContactNameChanging");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactNameColumn");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_DelegateName", "ContactNameChangeEventHandler");
                this.columnContactName.ExtendedProperties.Add("Generator_EventArgName", "ContactNameChangeEventArg");
                this.columnContactName.ExtendedProperties.Add("User_ColumnName", "ContactName");
                base.Columns.Add(this.columnContactName);
                this.columnContactTitle = new System.Data.DataColumn("ContactTitle", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangedEventName", "ContactTitleChanged");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangingEventName", "ContactTitleChanging");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactTitleColumn");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_DelegateName", "ContactTitleChangeEventHandler");
                this.columnContactTitle.ExtendedProperties.Add("Generator_EventArgName", "ContactTitleChangeEventArg");
                this.columnContactTitle.ExtendedProperties.Add("User_ColumnName", "ContactTitle");
                base.Columns.Add(this.columnContactTitle);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddress.ExtendedProperties.Add("Generator_ChangedEventName", "AddressChanged");
                this.columnAddress.ExtendedProperties.Add("Generator_ChangingEventName", "AddressChanging");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Address");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AddressColumn");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAddress");
                this.columnAddress.ExtendedProperties.Add("Generator_DelegateName", "AddressChangeEventHandler");
                this.columnAddress.ExtendedProperties.Add("Generator_EventArgName", "AddressChangeEventArg");
                this.columnAddress.ExtendedProperties.Add("User_ColumnName", "Address");
                base.Columns.Add(this.columnAddress);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.columnCity.ExtendedProperties.Add("Generator_ChangedEventName", "CityChanged");
                this.columnCity.ExtendedProperties.Add("Generator_ChangingEventName", "CityChanging");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "City");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CityColumn");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCity");
                this.columnCity.ExtendedProperties.Add("Generator_DelegateName", "CityChangeEventHandler");
                this.columnCity.ExtendedProperties.Add("Generator_EventArgName", "CityChangeEventArg");
                this.columnCity.ExtendedProperties.Add("User_ColumnName", "City");
                base.Columns.Add(this.columnCity);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangedEventName", "PostalCodeChanged");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangingEventName", "PostalCodeChanging");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PostalCodeColumn");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_DelegateName", "PostalCodeChangeEventHandler");
                this.columnPostalCode.ExtendedProperties.Add("Generator_EventArgName", "PostalCodeChangeEventArg");
                this.columnPostalCode.ExtendedProperties.Add("User_ColumnName", "PostalCode");
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new System.Data.DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.columnCountry.ExtendedProperties.Add("Generator_ChangedEventName", "CountryChanged");
                this.columnCountry.ExtendedProperties.Add("Generator_ChangingEventName", "CountryChanging");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Country");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CountryColumn");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCountry");
                this.columnCountry.ExtendedProperties.Add("Generator_DelegateName", "CountryChangeEventHandler");
                this.columnCountry.ExtendedProperties.Add("Generator_EventArgName", "CountryChangeEventArg");
                this.columnCountry.ExtendedProperties.Add("User_ColumnName", "Country");
                base.Columns.Add(this.columnCountry);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnPhone.ExtendedProperties.Add("Generator_ChangedEventName", "PhoneChanged");
                this.columnPhone.ExtendedProperties.Add("Generator_ChangingEventName", "PhoneChanging");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Phone");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PhoneColumn");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPhone");
                this.columnPhone.ExtendedProperties.Add("Generator_DelegateName", "PhoneChangeEventHandler");
                this.columnPhone.ExtendedProperties.Add("Generator_EventArgName", "PhoneChangeEventArg");
                this.columnPhone.ExtendedProperties.Add("User_ColumnName", "Phone");
                base.Columns.Add(this.columnPhone);
                this.columnFax = new System.Data.DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.columnFax.ExtendedProperties.Add("Generator_ChangedEventName", "FaxChanged");
                this.columnFax.ExtendedProperties.Add("Generator_ChangingEventName", "FaxChanging");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Fax");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FaxColumn");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFax");
                this.columnFax.ExtendedProperties.Add("Generator_DelegateName", "FaxChangeEventHandler");
                this.columnFax.ExtendedProperties.Add("Generator_EventArgName", "FaxChangeEventArg");
                this.columnFax.ExtendedProperties.Add("User_ColumnName", "Fax");
                base.Columns.Add(this.columnFax);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.Unique = true;
                this.columnCustomerID.MaxLength = 5;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 40;
                this.columnContactName.MaxLength = 30;
                this.columnContactTitle.MaxLength = 30;
                this.columnAddress.MaxLength = 60;
                this.columnCity.MaxLength = 15;
                this.columnPostalCode.MaxLength = 10;
                this.columnCountry.MaxLength = 15;
                this.columnPhone.MaxLength = 24;
                this.columnFax.MaxLength = 24;
                this.ExtendedProperties.Add("Generator_RowClassName", "CustomersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CustomersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CustomersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CustomersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Customers");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCustomers");
                this.ExtendedProperties.Add("User_TableName", "Customers");
            }
            
            public CustomersRow NewCustomersRow() {
                return ((CustomersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomersRowChanged != null)) {
                    this.CustomersRowChanged(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomersRowChanging != null)) {
                    this.CustomersRowChanging(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomersRowDeleted != null)) {
                    this.CustomersRowDeleted(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomersRowDeleting != null)) {
                    this.CustomersRowDeleting(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCustomersRow(CustomersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void CustomerIDChangeEventHandler(CustomersDataTable sender, CustomerIDChangeEventArg e);
            
            public class CustomerIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CustomerIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CustomerIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CompanyNameChangeEventHandler(CustomersDataTable sender, CompanyNameChangeEventArg e);
            
            public class CompanyNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CompanyNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CompanyNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactNameChangeEventHandler(CustomersDataTable sender, ContactNameChangeEventArg e);
            
            public class ContactNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactTitleChangeEventHandler(CustomersDataTable sender, ContactTitleChangeEventArg e);
            
            public class ContactTitleChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactTitleChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactTitleColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void AddressChangeEventHandler(CustomersDataTable sender, AddressChangeEventArg e);
            
            public class AddressChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AddressChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AddressColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CityChangeEventHandler(CustomersDataTable sender, CityChangeEventArg e);
            
            public class CityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PostalCodeChangeEventHandler(CustomersDataTable sender, PostalCodeChangeEventArg e);
            
            public class PostalCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PostalCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PostalCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CountryChangeEventHandler(CustomersDataTable sender, CountryChangeEventArg e);
            
            public class CountryChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CountryChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CountryColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PhoneChangeEventHandler(CustomersDataTable sender, PhoneChangeEventArg e);
            
            public class PhoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PhoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PhoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FaxChangeEventHandler(CustomersDataTable sender, FaxChangeEventArg e);
            
            public class FaxChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FaxChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FaxColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        public class CustomersRow : System.Data.DataRow {
            
            private CustomersDataTable tableCustomers;
            
            internal CustomersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomers = ((CustomersDataTable)(this.Table));
            }
            
            public string CustomerID {
                get {
                    return ((string)(this[this.tableCustomers.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomers.CustomerIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    return ((string)(this[this.tableCustomers.CompanyNameColumn]));
                }
                set {
                    this[this.tableCustomers.CompanyNameColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.ContactNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.ContactNameColumn] = value;
                }
            }
            
            public string ContactTitle {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.ContactTitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.ContactTitleColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.CityColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.PostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.CountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.CountryColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.FaxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.FaxColumn] = value;
                }
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableCustomers.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableCustomers.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactTitleNull() {
                return this.IsNull(this.tableCustomers.ContactTitleColumn);
            }
            
            public void SetContactTitleNull() {
                this[this.tableCustomers.ContactTitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomers.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableCustomers.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableCustomers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableCustomers.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableCustomers.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableCustomers.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableCustomers.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCustomers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableCustomers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableCustomers.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableCustomers.FaxColumn] = System.Convert.DBNull;
            }
        }
        
        public class CustomersRowChangeEvent : System.EventArgs {
            
            private CustomersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CustomersRowChangeEvent(CustomersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CustomersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    public interface ICustomersTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.CustomersDataTable dataTable);
        
        NorthwindDataSet.CustomersDataTable GetData();
        
        int Delete(string @Original_CustomerID);
        
        int Delete(object @Original_CustomerID);
        
        int Insert(string @CustomerID, string @CompanyName, string @ContactName, string @ContactTitle, string @Address, string @City, string @PostalCode, string @Country, string @Phone, string @Fax);
        
        int Insert(object @CustomerID, object @CompanyName, object @ContactName, object @ContactTitle, object @Address, object @City, object @PostalCode, object @Country, object @Phone, object @Fax);
        
        int Update(string @CustomerID, string @CompanyName, string @ContactName, string @ContactTitle, string @Address, string @City, string @PostalCode, string @Country, string @Phone, string @Fax, string @Original_CustomerID);
        
        int Update(object @CustomerID, object @CompanyName, object @ContactName, object @ContactTitle, object @Address, object @City, object @PostalCode, object @Country, object @Phone, object @Fax, object @Original_CustomerID);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.CustomersDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public partial class CustomersTableAdapter : System.ComponentModel.Component, ICustomersTableAdapter {
        
        private System.Data.SqlClient.SqlCommand m_DeleteCommand;
        
        private System.Data.SqlClient.SqlCommand m_InsertCommand;
        
        private System.Data.SqlClient.SqlCommand m_UpdateCommand;
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.SqlClient.SqlTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.SqlClient.SqlCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.SqlClient.SqlCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.SqlClient.SqlCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.SqlClient.SqlTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM [dbo].[Customers] WHERE (([CustomerID] = @Original_CustomerID))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = @"INSERT INTO [dbo].[Customers] ([CustomerID], [CompanyName], [ContactName], [ContactTitle], [Address], [City], [PostalCode], [Country], [Phone], [Fax]) VALUES (@CustomerID, @CompanyName, @ContactName, @ContactTitle, @Address, @City, @PostalCode, @Country, @Phone, @Fax)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = @"UPDATE [dbo].[Customers] SET [CustomerID] = @CustomerID, [CompanyName] = @CompanyName, [ContactName] = @ContactName, [ContactTitle] = @ContactTitle, [Address] = @Address, [City] = @City, [PostalCode] = @PostalCode, [Country] = @Country, [Phone] = @Phone, [Fax] = @Fax WHERE (([CustomerID] = @Original_CustomerID))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Customers";
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("ContactName", "ContactName");
            tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Fax", "Fax");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, PostalC" +
                "ode, Country, Phone, Fax FROM dbo.Customers";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM [dbo].[Customers] WHERE (([CustomerID] = @Original_CustomerID) AND ([CompanyName] = @Original_CompanyName) AND ((@IsNull_ContactName = 1 AND [ContactName] IS NULL) OR ([ContactName] = @Original_ContactName)) AND ((@IsNull_ContactTitle = 1 AND [ContactTitle] IS NULL) OR ([ContactTitle] = @Original_ContactTitle)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_PostalCode = 1 AND [PostalCode] IS NULL) OR ([PostalCode] = @Original_PostalCode)) AND ((@IsNull_Country = 1 AND [Country] IS NULL) OR ([Country] = @Original_Country)) AND ((@IsNull_Phone = 1 AND [Phone] IS NULL) OR ([Phone] = @Original_Phone)) AND ((@IsNull_Fax = 1 AND [Fax] IS NULL) OR ([Fax] = @Original_Fax)))";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContactName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContactTitle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_City", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PostalCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Phone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Fax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandText = @"INSERT INTO [dbo].[Customers] ([CustomerID], [CompanyName], [ContactName], [ContactTitle], [Address], [City], [PostalCode], [Country], [Phone], [Fax]) VALUES (@CustomerID, @CompanyName, @ContactName, @ContactTitle, @Address, @City, @PostalCode, @Country, @Phone, @Fax)";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE [dbo].[Customers] SET [CustomerID] = @CustomerID, [CompanyName] = @CompanyName, [ContactName] = @ContactName, [ContactTitle] = @ContactTitle, [Address] = @Address, [City] = @City, [PostalCode] = @PostalCode, [Country] = @Country, [Phone] = @Phone, [Fax] = @Fax WHERE (([CustomerID] = @Original_CustomerID) AND ([CompanyName] = @Original_CompanyName) AND ((@IsNull_ContactName = 1 AND [ContactName] IS NULL) OR ([ContactName] = @Original_ContactName)) AND ((@IsNull_ContactTitle = 1 AND [ContactTitle] IS NULL) OR ([ContactTitle] = @Original_ContactTitle)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_PostalCode = 1 AND [PostalCode] IS NULL) OR ([PostalCode] = @Original_PostalCode)) AND ((@IsNull_Country = 1 AND [Country] IS NULL) OR ([Country] = @Original_Country)) AND ((@IsNull_Phone = 1 AND [Phone] IS NULL) OR ([Phone] = @Original_Phone)) AND ((@IsNull_Fax = 1 AND [Fax] IS NULL) OR ([Fax] = @Original_Fax)))";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContactName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContactTitle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_City", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PostalCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Phone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Fax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("DeclarativeDataDisplay.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("DeclarativeDataDisplay.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("NorthwindConnection");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, PostalC" +
                "ode, Country, Phone, Fax FROM dbo.Customers";
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Customers.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.CustomersDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.CustomersDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            NorthwindDataSet.CustomersDataTable dataTable = new NorthwindDataSet.CustomersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(string @Original_CustomerID) {
            this.DeleteCommand.Parameters[0].Value = ((string)(@Original_CustomerID));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object @Original_CustomerID) {
            this.DeleteCommand.Parameters[0].Value = ((object)(@Original_CustomerID));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string @CustomerID, string @CompanyName, string @ContactName, string @ContactTitle, string @Address, string @City, string @PostalCode, string @Country, string @Phone, string @Fax) {
            this.InsertCommand.Parameters[0].Value = ((string)(@CustomerID));
            this.InsertCommand.Parameters[1].Value = ((string)(@CompanyName));
            this.InsertCommand.Parameters[2].Value = ((string)(@ContactName));
            this.InsertCommand.Parameters[3].Value = ((string)(@ContactTitle));
            this.InsertCommand.Parameters[4].Value = ((string)(@Address));
            this.InsertCommand.Parameters[5].Value = ((string)(@City));
            this.InsertCommand.Parameters[6].Value = ((string)(@PostalCode));
            this.InsertCommand.Parameters[7].Value = ((string)(@Country));
            this.InsertCommand.Parameters[8].Value = ((string)(@Phone));
            this.InsertCommand.Parameters[9].Value = ((string)(@Fax));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object @CustomerID, object @CompanyName, object @ContactName, object @ContactTitle, object @Address, object @City, object @PostalCode, object @Country, object @Phone, object @Fax) {
            this.InsertCommand.Parameters[0].Value = ((object)(@CustomerID));
            this.InsertCommand.Parameters[1].Value = ((object)(@CompanyName));
            this.InsertCommand.Parameters[2].Value = ((object)(@ContactName));
            this.InsertCommand.Parameters[3].Value = ((object)(@ContactTitle));
            this.InsertCommand.Parameters[4].Value = ((object)(@Address));
            this.InsertCommand.Parameters[5].Value = ((object)(@City));
            this.InsertCommand.Parameters[6].Value = ((object)(@PostalCode));
            this.InsertCommand.Parameters[7].Value = ((object)(@Country));
            this.InsertCommand.Parameters[8].Value = ((object)(@Phone));
            this.InsertCommand.Parameters[9].Value = ((object)(@Fax));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string @CustomerID, string @CompanyName, string @ContactName, string @ContactTitle, string @Address, string @City, string @PostalCode, string @Country, string @Phone, string @Fax, string @Original_CustomerID) {
            this.UpdateCommand.Parameters[0].Value = ((string)(@CustomerID));
            this.UpdateCommand.Parameters[1].Value = ((string)(@CompanyName));
            this.UpdateCommand.Parameters[2].Value = ((string)(@ContactName));
            this.UpdateCommand.Parameters[3].Value = ((string)(@ContactTitle));
            this.UpdateCommand.Parameters[4].Value = ((string)(@Address));
            this.UpdateCommand.Parameters[5].Value = ((string)(@City));
            this.UpdateCommand.Parameters[6].Value = ((string)(@PostalCode));
            this.UpdateCommand.Parameters[7].Value = ((string)(@Country));
            this.UpdateCommand.Parameters[8].Value = ((string)(@Phone));
            this.UpdateCommand.Parameters[9].Value = ((string)(@Fax));
            this.UpdateCommand.Parameters[10].Value = ((string)(@Original_CustomerID));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object @CustomerID, object @CompanyName, object @ContactName, object @ContactTitle, object @Address, object @City, object @PostalCode, object @Country, object @Phone, object @Fax, object @Original_CustomerID) {
            this.UpdateCommand.Parameters[0].Value = ((object)(@CustomerID));
            this.UpdateCommand.Parameters[1].Value = ((object)(@CompanyName));
            this.UpdateCommand.Parameters[2].Value = ((object)(@ContactName));
            this.UpdateCommand.Parameters[3].Value = ((object)(@ContactTitle));
            this.UpdateCommand.Parameters[4].Value = ((object)(@Address));
            this.UpdateCommand.Parameters[5].Value = ((object)(@City));
            this.UpdateCommand.Parameters[6].Value = ((object)(@PostalCode));
            this.UpdateCommand.Parameters[7].Value = ((object)(@Country));
            this.UpdateCommand.Parameters[8].Value = ((object)(@Phone));
            this.UpdateCommand.Parameters[9].Value = ((object)(@Fax));
            this.UpdateCommand.Parameters[10].Value = ((object)(@Original_CustomerID));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Customers");
        }
        
        public virtual int Update(NorthwindDataSet.CustomersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
}
